# -*- coding: utf-8 -*-
"""CSE326_Q1_2018331116.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NBhn6lR4dKxk4jEwI5O92u96I9wFwixK
"""

# #_____Reg: 2018331116______ 

# #Q1. Generate and plot the elementary signals in DSP (Impulse, unit impulse, ramp, 
#      Exponential, and sinusoid signals)


# Function to plot Impulse signal

# importing libraries
import numpy as np
import matplotlib.pyplot as plt

def impulse( n):
    delta =[]
    for sample in n:
        if sample == 0:
            delta.append(1)
        else:
            delta.append(0)
              
    return delta
  

UL = 10
LL = -10
n = np.arange(LL, UL, 1)
d = impulse( n)
plt.stem(n, d)
plt.xlabel('n')
plt.xticks(np.arange(LL, UL, 1))
plt.yticks([0, 1])
plt.ylabel('d[n]')
plt.title('Impulse d[0]')

# Function to plot unit Impulse signal d(a)

# importing libraries
import numpy as np
import matplotlib.pyplot as plt

def unit_impulse(a, n):
    delta =[]
    for sample in n:
        if sample == a:
            delta.append(1)
        else:
            delta.append(0)
              
    return delta
  
a = 4 # Enter delay or advance
UL = 10
LL = -10
n = np.arange(LL, UL, 1)
d = unit_impulse(a, n)
plt.stem(n, d)
plt.xlabel('n')
plt.xticks(np.arange(LL, UL, 1))
plt.yticks([0, 1])
plt.ylabel('d[n]')
plt.title('Unit Impulse d[4]')

import numpy as np
import matplotlib.pyplot as plt
  
# function to generate unit step u[n-a]
# LL and UL are lower and upper limits of discrete time line
def unit_step(a, n):
    unit =[]
    for sample in n:
        if sample<a:
            unit.append(0)
        else:
            unit.append(1)
    return(unit)
  
# plot unit step function u[n-a]
a = 0       # Enter delay or advance
UL = 10
LL = -10
n = np.arange(LL, UL, 1)
unit = unit_step(a, n)
plt.stem(n, unit)
plt.xlabel('n')
plt.xticks(np.arange(LL, UL, 1))
plt.yticks([0, 1])
plt.ylabel('u[n]')
plt.title('Unit step u[n-a]')

# Function to generate unit ramp signal r(n)
# r(n)= n for n>= 0, r(n)= 0 otherwise


# importing libraries
import numpy as np 
import matplotlib.pyplot as plt

def unit_ramp(n):
  ramp= []
  
  for x in n:
    if(x<0):
      ramp.append(0) 
    else :
      ramp.append(x) 
  return ramp 

UL =11 
LL =-10 
n= np.arange(LL,UL,1)
r= unit_ramp(n)
plt.stem(n,r) 

plt.xlabel('n')
plt.ylabel('r[n]')
plt.xticks(np.arange(LL, UL, 1))
plt.yticks([0, UL, 1])

plt.title('Unit Ramp r[n]')

# Function to generate exponential signals e**(at)

# importing libraries
import numpy as np 
import matplotlib.pyplot as plt


def exponential(a, n):
    expo =[]
    for sample in n:
        expo.append(np.exp(a * sample))
    return (expo)
         
a = 2
UL = 1
LL = -1
n = np.arange(LL, UL, 0.1)
x = exponential(a, n)
plt.stem(n, x)
plt.xlabel('n')
plt.xticks(np.arange(LL, UL, 0.2))
# plt.yticks([0, 10, 1])
plt.ylabel('x[n]')
plt.title('Exponential Signal e**(an)')

import numpy as np
import math
import matplotlib.pyplot as plt


pi=3.1416
f=4 
time = np.arange(0, 1, 0.01)
sin = np.sin(2*np.pi*f*time)
cos = np.cos(2*np.pi*f*time)

plt.xlabel("time")
plt.ylabel("Y")
plt.plot(time,sin)
plt.plot(time,cos)
#plt.title(" sinusoid signal")
plt.savefig("Sinusoid.png")
plt.title('Sine and Cosine Signal')
plt.legend(['Sine', 'Cosine'])